}
m <- data.frame(X=1:3, Y)
m <- data.frame(X=1:3, Y=0)
m
m <- data.frame(X=1:3, Y=0)
for (i in 1:3) {
m[i, ] <- c(i, nrow(X[X$send_count==i, ]))
}
m
fit <- lm(log(Y) ~ X, data=m)
summary(fit)
m <- data.frame(X=1:3, Y=0)
for (i in 1:3) {
m[i, ] <- c(i, nrow(X[X$send_count==i & is_succ==1, ]))
}
m
m <- data.frame(X=1:3, Y=0)
for (i in 1:3) {
m[i, ] <- c(i, nrow(X[X$send_count==i & X$is_succ==1, ]))
}
m
fit <- lm(log(Y) ~ X, data=m)
summary(fit)
exp(predict(fit, data.frame(X1=4)))
exp(predict(fit, data.frame(X=4)))
nrow(X[X$send_count==4 & X$is_succ==1, ])
nrow(X[X$req_freq_min==1, ])
nrow(X[X$req_freq_min==1 & X$send_count=1, ])
nrow(X[X$req_freq_min==1 & X$send_count==1, ])
head(X[X$req_freq_min==1 & X$send_count==1, ])
head(features[X$req_freq_min==1 & X$send_count==1, ])
nrow(X[X$req_freq_min==1 & X$send_count==3, ])
nrow(X[X$req_freq_min==1 & X$send_count==3 & X$is_succ==1, ])
nrow(X[X$req_freq_min==1 & X$send_count==3 & X$is_succ==0, ])
nrow(X[X$is_succ==0 & X$send_count==3, ])
nrow(X[X$is_succ==0 & X$send_count==1, ])
table()
?table
table(is_succ, send_count, data=X)
table(X$is_succ, X$send_count)
X_li <- X[X$is_succ==0 & X$send_count==1]
X_li <- X[X$is_succ==0 & X$send_count==1, ]
dim(X_li)
summary(X_li)
X$oot_no_reply <- as.factor(X$oot_no_reply)
m <- data.frame(X=1:3, Y=0)
for (i in 1:3) {
m[i, ] <- c(i, nrow(X[X$send_count==i & X$is_succ==1, ]))
}
m
fit <- lm(log(Y) ~ X, data=m)
summary(fit)
exp(predict(fit, data.frame(X=4)))
nrow(X[X$send_count==4 & X$is_succ==1, ])
m <- data.frame(X=1:3, Y=0)
for (i in 1:3) {
#m[i, ] <- c(i, nrow(X[X$send_count==i & X$is_succ==1, ]))
m[i, ] <- c(i, nrow(X[X$send_count==i, ]))
}
m
fit <- lm(log(Y) ~ X, data=m)
summary(fit)
exp(predict(fit, data.frame(X=4)))
nrow(X[X$send_count==4 & X$is_succ==1, ])
print(nrow(X[X$req_freq==1 & X$send_count==3 & X$is_succ==0, ]))
nrow(X[X$send_count==4 & X$is_succ==1, ])
nrow(X[X$req_freq==1 & X$send_count==3 & X$is_succ==0, ])
nrow(X[X$send_count==4 & X$is_succ==1 & X$req_freq==1, ])
nrow(X[X$send_count==4 & X$is_succ==1 & X$req_freq==0, ])
m <- data.frame(X=1:3, Y=0)
for (i in 1:3) {
m[i, ] <- c(i, nrow(X[X$send_count==i & X$is_succ==1, ]))
}
m
dim(X)
sum(m$Y)
161339 - sum(m$Y)
m <- data.frame(X=1:4, Y=0)
for (i in 1:4) {
m[i, ] <- c(i, nrow(X[X$send_count==i & X$is_succ==1, ]))
}
m
fit <- lm(log(Y) ~ X, data=m)
summary(fit)
nrow(X[X$req_freq==1 & X$send_count==3 & X$is_succ==0, ])
X_li <- X[X$send_count==3 & X$is_succ==1, ]
dim(X_li)
nrow(X_li[X_li$req_freq==1, ])
nrow(X[X$send_count==4 & X$is_succ==1, ])
nrow(X[X$req_freq==1 & X$send_count==3 & X$is_succ==0, ])
nrow(X[X$send_count==4 & X$is_succ==1, ])
nrow(X[X$req_freq==1 & X$send_count==3 & X$is_succ==0, ])
exp(predict(fit, data.frame(X1=4), interval='prediction', level=0.10))
exp(predict(fit, data.frame(X=4), interval='prediction', level=0.10))
exp(predict(fit, data.frame(X=4), interval='prediction', level=0.40))
exp(predict(fit, data.frame(X=4), interval='prediction', level=0.50))
exp(predict(fit, data.frame(X=4), interval='prediction', level=0.60))
exp(predict(fit, data.frame(X=4), interval='prediction', level=0.70))
exp(predict(fit, data.frame(X=4), interval='prediction', level=0.80))
exp(predict(fit, data.frame(X=4), interval='prediction', level=0.90))
exp(predict(fit, data.frame(X=4), interval='prediction', level=0.95))
summary(fit)
nrow(X[X$req_freq_min==1 & X$send_count==3 & X$is_succ==0, ])
nrow(X[X$req_freq_day==1 & X$send_count==3 & X$is_succ==0, ])
m <- data.frame(X=1:3, Y=0)
for (i in 1:3) {
m[i, ] <- c(i, nrow(X[X$send_count==i & X$is_succ==1, ]))
}
m
```
考虑验证码请求次数是一个指数递减的回归模型 Y = a*e^bx,
```{r}
fit <- lm(log(Y) ~ X, data=m)
summary(fit)
```
根据模型预测请求4次验证码的人次(请求4次+3次以后分钟频率被限制)
```{r}
exp(predict(fit, data.frame(X1=4), interval='prediction', level=0.95))
exp(predict(fit, data.frame(X=4), interval='prediction', level=0.95))
exp(predict(fit, data.frame(X=4), interval='prediction', level=0.5))
exp(predict(fit, data.frame(X=4), interval='prediction', level=0.6))
nrow(X[X$send_count==4 & X$is_succ==1, ])
nrow(X[X$req_freq_min==1 & X$send_count==3 & X$is_succ==0, ])
exp(predict(fit, data.frame(X=4), interval='prediction', level=0.8))
exp(predict(fit, data.frame(X=4), interval='prediction', level=0.7))
exp(predict(fit, data.frame(X=4), interval='prediction', level=0.75))
table(is_succ, send_count, data=X)
table(X$is_succ, X$send_count)
table(X$is_succ, X$send_count)
X_li <- X[X$is_succ==0 & X$send_count==1, ]
dim(X_li)
nrow(X_li)
summary(X_li)
plot(X_li$req_count)
barplot(X_li$req_count)
hist(X_li$req_count)
nrow(X_li[X_li$req_count>100, ])
nrow(X_li[X_li$req_count>50, ])
nrow(X_li[X_li$req_count>30, ])
nrow(X_li[X_li$req_count>20, ])
nrow(X_li[X_li$req_count>25, ])
nrow(X_li[X_li$req_count>30, ])
nrow(X[X$req_count>30, ])
X[X$req_count>100, ]
features[X$req_count>100, ]
nrow(features[features$req_count>100, ])
X <- features[features$req_count>100, -1]
X$is_succ <- as.factor(X$is_succ)
X$req_freq <- as.factor(X$req_freq)
X$req_freq_min <- as.factor(X$req_freq_min)
X$req_freq_day <- as.factor(X$req_freq_day)
X$val_freq <- as.factor(X$val_freq)
X$oot_no_reply <- as.factor(X$oot_no_reply)
X$oot_reply <- as.factor(X$oot_reply)
X$wrong_reply <- as.factor(X$wrong_reply)
summary(X)
m <- data.frame(X=1:3, Y=0)
for (i in 1:3) {
m[i, ] <- c(i, nrow(X[X$send_count==i & X$is_succ==1, ]))
}
m
features <- read.csv("~/workspace/yixin_data/all_features.csv")
features <- read.csv("~/workspace/yixin_data/all_features.csv")
X <- features[features$req_count>100, -1]
X$is_succ <- as.factor(X$is_succ)
X$req_freq <- as.factor(X$req_freq)
X$req_freq_min <- as.factor(X$req_freq_min)
X$req_freq_day <- as.factor(X$req_freq_day)
X$val_freq <- as.factor(X$val_freq)
X$oot_no_reply <- as.factor(X$oot_no_reply)
X$oot_reply <- as.factor(X$oot_reply)
X$wrong_reply <- as.factor(X$wrong_reply)
#levels(X$req_freq) <- c('无请求验证频率受限', '请求验证频率受限')
#levels(X$val_freq) <- c('无验证请求频率受限', '验证请求频率受限')
#levels(X$wrong_reply) <- c('无回复验证错误的', '回复验证码错误')
#levels(X$oot_no_reply) <- c('无验证码超时', '未回复导致超时')
#levels(X$oot_reply) <- c('无回复验证超时', '回复验证码但是超时')
summary(X)
X <- features[features$req_count<100, -1]
X$is_succ <- as.factor(X$is_succ)
X$req_freq <- as.factor(X$req_freq)
X$req_freq_min <- as.factor(X$req_freq_min)
X$req_freq_day <- as.factor(X$req_freq_day)
X$val_freq <- as.factor(X$val_freq)
X$oot_no_reply <- as.factor(X$oot_no_reply)
X$oot_reply <- as.factor(X$oot_reply)
X$wrong_reply <- as.factor(X$wrong_reply)
summary(X)
m <- data.frame(X=1:3, Y=0)
for (i in 1:3) {
m[i, ] <- c(i, nrow(X[X$send_count==i & X$is_succ==1, ]))
}
m
fit <- lm(log(Y) ~ X, data=m)
summary(fit)
exp(predict(fit, data.frame(X=4), interval='prediction', level=0.75))
nrow(X[X$send_count==4 & X$is_succ==1, ])
nrow(X[X$req_freq_min==1 & X$send_count==3 & X$is_succ==0, ])
table(X$is_succ, X$send_count)
X_li <- X[X$is_succ==0 & X$send_count==1, ]
summary(X_li)
summary(X)
features[features$req_count>100, ]
f100 <- features[features$req_count>100, ]
head(c(f100$X..phone, f100$req_count))
head(rbind(f100$X..phone, f100$req_count))
c(f100$X..phone, f100$req_count)
f100$X..phone
f100[c(1,11),]
f100
f100[c(1,11),]
f100[,c(1,11)]
f100 <- features[features$req_count>100, ]
f100 <- f100[, c(1,11)]
f100
f100 <- features[features$req_count>30, ]
f100 <- f100[, c(1,11)]
dim(f100)
f100 <- features[features$req_count>30, ]
head(f100)
f100 <- features[features$req_count>100, ]
head(f100)
f100 <- features[features$req_count>30, ]
summary(f100)
summary(f100[2:,])
summary(f100[2:11,])
summary(f100[,2:])
summary(f100[,2:11])
class(X$is_succ)
features$is_succ <- as.factor(features$is_succ)
features$req_freq <- as.factor(features$req_freq)
features$req_freq_min <- as.factor(features$req_freq_min)
features$req_freq_day <- as.factor(features$req_freq_day)
features$val_freq <- as.factor(features$val_freq)
features$oot_no_reply <- as.factor(features$oot_no_reply)
features$oot_reply <- as.factor(features$oot_reply)
features$wrong_reply <- as.factor(features$wrong_reply)
X <- features[features$req_count<100, -1]
summary(X)
f100 <- features[features$req_count>100, ]
f100 <- f100[, c(1,2,11)]
summary(f100)
f100 <- features[features$req_count>30, ]
f100 <- f100[, c(1,2,11)]
summary(f100)
f30 <- features[features$req_count>30, ]
f30 <- f100[, c(1,2,11)]
f30 <- f30[, c(1,2,11)]
summary(f[,2:3])
summary(f30[,2:3])
source('~/.active-rstudio-document', echo=TRUE)
head(X[X$send_count==X$req_count,])
head(X[X$send_count==X$req_count & X$is_succ==0,])
nrow(X[X$send_count==X$req_count & X$is_succ==0,])
nrow(X[X$send_count==X$req_count,])
head(X[X$send_count==X$req_count,])
dim(X)
head(X)
nrow(X[X$send_count==X$req_count-1,])
nrow(X[X$send_count==X$req_count-1 & X$is_succ==0,])
nrow(X[X$send_count==X$req_count-1 & X$is_succ==0 & X$oot_no_reply==1,])
table(X$is_succ, X$wrong_reply)
table(X$is_succ, X$oot_reply)
nrow(X[X$send_count==X$req_count-1 & X$is_succ==0 & X$oot_no_reply==1,])
nrow(X[X$send_count==X$req_count-1 & X$is_succ==0 & X$oot_no_reply==1 & X$send_count==1,])
nrow(X[X$send_count==X$req_count-1 & X$is_succ==0 & X$oot_no_reply==1 & X$send_count==2,])
nrow(X[X$send_count==X$req_count-1 & X$is_succ==0 & X$oot_no_reply==1 & X$send_count>3,])
nrow(X[X$send_count==X$req_count-1 & X$is_succ==0 & X$oot_no_reply==1 & X$send_count==3,])
setwd('~/Dropbox/UCI//adult')
adult <- read.csv("~/Dropbox/UCI/adult/adult.data", header=F)
View(adult)
class(adult)
summary(adult)
names(adult)
names(adult) <- c('age', 'work', 'fnlwgt', 'edu', 'edu.num', 'marital', 'occu', 'relation', 'race', 'sex', 'cap.gain', 'cap.loss', 'hour', 'country', 'salary')
summary(adult)
?sample
sample(adult, 10, replace=F)
x <- 1:12
sample(x)
sample(x, 5)
?sample
sample.int(dim(adult)[1], 5)
dim(adult)
s <- sample.int(dim(adult)[1], 10)
adult[s, ]
s <- sample.int(dim(adult)[1], 10)
small.adult <- adult[s, ]
View(small.adult)
s <- sample.int(dim(adult)[1], 100)
small.adult <- adult[s, ]
View(small.adult)
plot(small.adult$edu.num, small.adult$hour, col=small.adult$salary)
summary(small.adult)
plot(small.adult$edu.num, small.adult$hour, col=small.adult$salary)
plot(small.adult$age, small.adult$hour, col=small.adult$salary)
?hist
hist(small.adult$hour)
example(hist)
example(hist)
example(hist)
example(hist)
library(e1071)
clf <- naiveBayes(small.adult[,1:14], small.adult[,15])
summary(clf)
table(predict(clf, small.adult[,-15]), small.adult[,15])
size <- 300
s <- sample.int(dim(adult)[1], size)
small.adult <- adult[s, ]
clf <- naiveBayes(small.adult[,1:14], small.adult[,15])
table(predict(clf, small.adult[,-15]), small.adult[,15])
(predict(clf, small.adult[,-15]) == small.adult[,15])
sum(predict(clf, small.adult[,-15]) == small.adult[,15])
sum(predict(clf, small.adult[,-15]) == small.adult[,15]) / size
size <- 100
s <- sample.int(dim(adult)[1], size)
small.adult <- adult[s, ]
clf <- naiveBayes(small.adult[,1:14], small.adult[,15])
table(predict(clf, small.adult[,-15]), small.adult[,15])
sum(predict(clf, small.adult[,-15]) == small.adult[,15]) / size
size <- 100
s <- sample.int(dim(adult)[1], size)
small.adult <- adult[s, ]
clf <- naiveBayes(small.adult[,1:14], small.adult[,15])
table(predict(clf, small.adult[,-15]), small.adult[,15])
sum(predict(clf, small.adult[,-15]) == small.adult[,15]) / size
size <- 1000
s <- sample.int(dim(adult)[1], size)
small.adult <- adult[s, ]
clf <- naiveBayes(small.adult[,1:14], small.adult[,15])
table(predict(clf, small.adult[,-15]), small.adult[,15])
sum(predict(clf, small.adult[,-15]) == small.adult[,15]) / size
size <- 3000
s <- sample.int(dim(adult)[1], size)
small.adult <- adult[s, ]
clf <- naiveBayes(small.adult[,1:14], small.adult[,15])
table(predict(clf, small.adult[,-15]), small.adult[,15])
sum(predict(clf, small.adult[,-15]) == small.adult[,15]) / size
size <- 10000
s <- sample.int(dim(adult)[1], size)
small.adult <- adult[s, ]
clf <- naiveBayes(small.adult[,1:14], small.adult[,15])
table(predict(clf, small.adult[,-15]), small.adult[,15])
sum(predict(clf, small.adult[,-15]) == small.adult[,15]) / size
size <- 15000
s <- sample.int(dim(adult)[1], size)
small.adult <- adult[s, ]
clf <- naiveBayes(small.adult[,1:14], small.adult[,15])
table(predict(clf, small.adult[,-15]), small.adult[,15])
sum(predict(clf, small.adult[,-15]) == small.adult[,15]) / size
size <- 30000
s <- sample.int(dim(adult)[1], size)
small.adult <- adult[s, ]
clf <- naiveBayes(small.adult[,1:14], small.adult[,15])
table(predict(clf, small.adult[,-15]), small.adult[,15])
sum(predict(clf, small.adult[,-15]) == small.adult[,15]) / size
size <- 10000
source('~/Dropbox/UCI/adult/adult.R', echo=TRUE)
source('~/Dropbox/UCI/adult/adult.R', echo=TRUE)
accus <- confident_accu()
summary(accus)
accus
source('~/Dropbox/UCI/adult/adult.R', echo=TRUE)
accus <- confident_accu()
accus
hist(accus)
?hist
hist(accus, freq=F)
lines(density(accus), col="blue")
shapiro.test(accus)
accus
shapiro.test(runif(100, min = 2, max = 4))
shapiro.test(accus)
density(accus)
shapiro.test(rnorm(100, min = 2, max = 4))
shapiro.test(rnorm(100))
shapiro.test(accus)
?hist
hist(accus, freq=FALSE, breaks=10, col='red')
rug(jitter(accus))
lines(density(accus))
hist(accus, freq=FALSE, breaks=10, col='red')
rug(jitter(accus, amount=0.01))
xfit <- seq(min(accus), max(accus), length=40)
yfit <- dnorm(xfit, mean=mean(x), sd=sd(x))
yfit
h <- hist(accus, breaks=10, col='red')
yfit <- yfit * diff(h$mids[1:2]) * length(x)
yfit
h$mids
lines(xfit, yfit, col='blue', lwd=2)
h <- hist(accus, breaks=10, col='red')
yfit <- yfit * diff(h$mids[1:2]) * length(x)
lines(xfit, yfit, col='blue', lwd=2)
length(x)
xfit
lines(xfit, col='blue', lwd=2)
h <- hist(accus, breaks=10, col='red')
lines(xfit, col='blue', lwd=2)
x <- accus
h <- hist(x, breaks=10, col='red')
xfit <- seq(min(x), max(x), length=40)
xfit
yfit <- dnorm(xfit, mean=mean(x), sd=sd(x))
yfit
yfit <- yfit * diff(h$mids[1:2]) * length(x)
yfit
lines(xfit, yfit, col='blue', lwd=2)
box()
plot_norm <- function(x) {
h <- hist(x, breaks=10, col='red')
xfit <- seq(min(x), max(x), length=40)
yfit <- dnorm(xfit, mean=mean(x), sd=sd(x))
yfit <- yfit * diff(h$mids[1:2]) * length(x)
lines(xfit, yfit, col='blue', lwd=2)
box()
}
plot_norm(accus)
plot_norm <- function(x) {
h <- hist(x,
breaks=10,
col='red',
main="Histogram with normal curve and box")
xfit <- seq(min(x), max(x), length=40)
yfit <- dnorm(xfit, mean=mean(x), sd=sd(x))
yfit <- yfit * diff(h$mids[1:2]) * length(x)
lines(xfit, yfit, col='blue', lwd=2)
box()
}
plot_norm(accus)
size <- 1000
s <- sample.int(dim(adult)[1], size)
small.adult <- adult[s, ]
summary(small.adult)
boxplot(salary ~ edu, data=small.adult)
boxplot(hours ~ salary, data=small.adult)
boxplot(hour ~ salary, data=small.adult)
boxplot(hour ~ salary, data=small.adult)
names(small.adult)
boxplot(age ~ salary, data=small.adult)
boxplot(fnlwgt ~ salary, data=small.adult)
boxplot(edu.num ~ salary, data=small.adult)
boxplot(cap.gain ~ salary, data=small.adult)
boxplot(cap.loss ~ salary, data=small.adult)
install.packages('vioplot')
library(vioplot)
boxplot(edu.num ~ salary, data=small.adult)
boxplot(hour ~ salary, data=small.adult)
x1 <- small.adult$edu.num[small.adult$salary='>50K']
head small.adult
head(small.adult)
data(mtcars)
head(mtcars)
head(small.adult$salary=='<=50K')
head(small.adult$edu.num)
x1 <- small.adult$edu.num[small.adult$salary=='>50K']
x2 <- small.adult$edu.num[small.adult$salary=='<=50K']
x1
head(small.adult)
head(small.adult$salary=='<=50K')
class(small.adult$salary)
levels(small.adult$salary)
head(small.adult$salary==' <=50K')
x2 <- small.adult$edu.num[small.adult$salary==' <=50K']
x1 <- small.adult$edu.num[small.adult$salary==' >50K']
vioplot(x1, x2, names=levels(small.adult$salary))
vioplot(x1, x2, names=levels(small.adult$salary))
x1 <- small.adult$edu.num[small.adult$salary==' <=50K']
x2 <- small.adult$edu.num[small.adult$salary==' >50K']
vioplot(x1, x2, names=levels(small.adult$salary))
full_size_pred <- function() {
clf <- naiveBayes(adult[,1:14], adult[,15])
table(predict(clf, adult[,-15]), adult[,15])
sum(predict(clf, adult[,-15]) == adult[,15]) / size
}
full_size_pred()
full_size_pred <- function() {
clf <- naiveBayes(adult[,1:14], adult[,15])
print(table(predict(clf, adult[,-15]), adult[,15]))
sum(predict(clf, adult[,-15]) == adult[,15]) / size
}
full_size_pred()
full_size_pred <- function() {
n <- dim(adult)[2]
clf <- naiveBayes(adult[,1:14], adult[,15])
print(table(predict(clf, adult[,-15]), adult[,15]))
sum(predict(clf, adult[,-15]) == adult[,15]) / n
}
full_size_pred()
dim(adult)
full_size_pred <- function() {
n <- dim(adult)[1]
clf <- naiveBayes(adult[,1:14], adult[,15])
print(table(predict(clf, adult[,-15]), adult[,15]))
sum(predict(clf, adult[,-15]) == adult[,15]) / n
}
full_size_pred()
install.packages('C50')
library(C50)
tree.model <- C5.0(salary~., data=adult)
summary(tree.model)
table(predict(tree.model, adult[,-15]), adult[,15])
sum(predict(tree.model, adult[,-15]) == adult[,15]) / dim(adult)[1]
summary(tree.model)
install.packages('rweka')
install.packages('RWeka')
library(RWeka)
library(rweka)
?install.packages
remove.packages('RWeka')
install.packages('RWeka', dependencies=T)
library(RWeka)
